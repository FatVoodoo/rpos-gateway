{"version":3,"sources":["rpos-gateway.ts"],"names":[],"mappings":";AA0BA,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAE3B,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,IAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AACpC,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AACtC,sBAAsB,aAAa,CAAC,CAAA;AACpC,IAAO,aAAa,WAAW,2BAA2B,CAAC,CAAC;AAC5D,IAAO,YAAY,WAAW,0BAA0B,CAAC,CAAC;AAC1D,IAAO,gBAAgB,WAAW,8BAA8B,CAAC,CAAC;AAElE,IAAI,KAAK,GAAG,aAAK,CAAC,KAAK,CAAC;AACxB,IAAI,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAEtC,IAAI,MAAkB,CAAC;AACvB,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAE,iBAAiB,CAAC;AACnD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAE,GAAG,CAAC,CAAC,CAAC;IACxB,UAAU,GAAG,IAAI,GAAC,UAAU,CAAC;AAC9B,CAAC;AAED,IAAI,CAAC;IACJ,MAAM,GAAe,OAAO,CAAC,UAAU,CAAC,CAAC;AAC1C,CAAE;AAAA,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,CAAC;IACT,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,yCAAyC,EAAE,UAAU,CAAC,CAAC;IACvE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC;AAED,KAAK,CAAC,GAAG,CAAC,KAAK,GAAmB,MAAM,CAAC,QAAQ,CAAC;AAClD,MAAM,CAAC,iBAAiB,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;AAC1D,MAAM,CAAC,iBAAiB,CAAC,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC;AACzD,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACxB,KAAK,CAAC,aAAa,EAAE,CAAC;AAEtB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACvC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC;AAED,IAAI,SAAS,GAAG,OAAO,EAAE,CAAC;AAC1B,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAE9C,IAAI,cAAc,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAC3D,IAAI,aAAa,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACzD,IAAI,iBAAiB,GAAG,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAErD,cAAc,CAAC,KAAK,EAAE,CAAC;AACvB,aAAa,CAAC,KAAK,EAAE,CAAC;AACtB,iBAAiB,CAAC,KAAK,EAAE,CAAC","file":"rpos-gateway.js","sourcesContent":["/// <reference path=\"./rpos-gateway.d.ts\"/>\n/// <reference path=\"./typings/main.d.ts\"/>\n\n/*\nThe MIT License(MIT)\n\nCopyright(c) 2015 Jeroen Versteege\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files(the \"Software\"), to deal \nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and / or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject tothe following conditions:\n\n    The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nrequire(\"./lib/extension\");\n\nimport http = require(\"http\");\nimport express = require(\"express\");\nimport minimist = require(\"minimist\");\nimport { Utils } from \"./lib/utils\";\nimport DeviceService = require(\"./services/device_service\");\nimport MediaService = require(\"./services/media_service\");\nimport DiscoveryService = require(\"./services/discovery_service\");\n\nvar utils = Utils.utils;\nvar argv = minimist(process.argv.slice(2));\nlet pjson = require(\"./package.json\");\n\nlet config: rposConfig;\nvar configPath = argv[\"config\"]||\"rposConfig.json\";\nif (configPath[0]!='/') {\n\tconfigPath = \"./\"+configPath;\n}\n\ntry {\n\tconfig = <rposConfig>require(configPath);\n} catch(e) {\n\tif (e.code !== 'MODULE_NOT_FOUND') {\n\t\tthrow e;\n\t}\n\t\n\tutils.log.error(\"Could not find configuration file at %s\", configPath);\n\tprocess.exit(1);\n}\n\nutils.log.level = <Utils.logLevel>config.logLevel;\nconfig.DeviceInformation.SerialNumber = utils.getSerial();\nconfig.DeviceInformation.FirmwareVersion = pjson.version;\nutils.setConfig(config);\nutils.testIpAddress();\n\nfor (var i in config.DeviceInformation) {\n  utils.log.info(\"%s : %s\", i, config.DeviceInformation[i]);\n}\n\nlet webserver = express();\nlet httpserver = http.createServer(webserver);\n\nlet device_service = new DeviceService(config, httpserver);\nlet media_service = new MediaService(config, httpserver);\nlet discovery_service = new DiscoveryService(config);\n\ndevice_service.start();\nmedia_service.start();\ndiscovery_service.start();\n"]}